TAB: Hello World
- 1. Basic Hello
<# //<3 /> #>
<# // <4> #>
namespace Hello
{
   public class Program
   {
      private static void Main()
      {
         System.Console.WriteLine("Hello, World!");
         System.Console.ReadLine();
      }
   }
}
<# // </4> #>
- 2. Set the output
<#@ output extension=".generated.cs" #>
- 3. Standard Ctrl Block
 <#
   string name = "Glug.NET";
 #>
- 4. Hello Name
namespace Hello
{
   public class Program
   {
      private static void Main()
      {
          System.Console.WriteLine("Hello, <#= name #>!");
          System.Console.ReadLine();
      }
   }
}
TAB: Hello Kids
- 1. Basic Template
<# //3 #>
<# //4 #>
<#@ output extension="generated.cs" #>
<# //6 #>
//------------------------------------
//
// This file is autogenerated.
//
//------------------------------------
namespace Hello
{
    public enum StoredNames
    {
        /*
            I am going to need to "fill in" the values from the json file here.
            I will have to use a T4 Expression Control block
        */
		//8
    }
}
// 2
- 2. Class Feature
<#+ // a "T4 class feature control block"
    public string[] GetNamesFromJsonFile( string filePath )
    {
	    string[] theResult = null;
		//5
		return theResult;
	}
 #>

- 3. Assemblies
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\Newtonsoft.Json.12.0.3\lib\net45\Newtonsoft.Json.dll" #>
 

- 4. Imports
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
 
- 5. ParseContents
      string[] theResult;
      string json = File.ReadAllText( filePath );
      JObject jData = JObject.Parse( json );
      theResult = ((JArray) jData["names"]).Select(j => j.Value<string>()).ToArray();
      return theResult;

- 6. Call Method
#Warning - this intentionally creates an error
#We need to use hostspecific = ture and host.resolvepath
<# 
   //9
   string jsonFilePath = "..\\kids.json";
   //7
   string[] names = GetNamesFromJsonFile( jsonFilePath );
   string enumMembers = String.Join( $",{Environment.NewLine}", names );
 #>

- 7. ResolvePath
	string jsonFilePath = Host.ResolvePath( "..\\kids.json" );

- 8. Write Enum Members
		//10
		<#= enumMembers #>
- 9. Set indent
	string indent = "    ";
- 10. Use indent
<#   
   PushIndent( indent ); 
   PushIndent( indent );
 #>
<#=      enumMembers #>
<# //11 #>
- 11. PopIndent
<#   
   PopIndent(); 
   PopIndent(); 
 #>



TAB: Using Includes
- 1. Include File Contents
<#+
   private JObject ParseJObject( string filePath )
   {
      string[] theResult;
      string json = File.ReadAllText( filePath );
      return JObject.Parse( json );
   }

   public string CommaDelimitedListOfJArrayValues( string filePath, string arrayName  )
   {
      var jArray = ( (JArray) ParseJObject( filePath )[ arrayName ] );
      var array = jArray.Select(j => j.Value<string>()).ToArray();
      return String.Join($",{Environment.NewLine}", array);
   }
 #>
-2 Include Directive
<#@ include file="$(SolutionDir)ReadJsonFile.ttinclude" #>

